 Exercise 1
Show the biggest 3 countries on the least populous continent (except for Antarctica).
(Comment: please don’t hardcode ‘Oceania’.)
               select continent,  name as country_name, population, 
               sum(population) over (partition by continent) as continent_pop
               from country
               where population > 0
               order by continent_pop,population Desc
               limit 3

Exercise 2
Show all countries with at least 3 official languages, order them by their surface area.
               select c.code, c.surfacearea, cc.off_lang 
               from country as c
               left join 
               (select countrycode, count(isofficial) as off_lang 
               from countrylanguage 
               where isofficial = TRUE 
               group by countrycode) as cc
               on c.code = cc.countrycode
               where cc.off_lang >= 3 
               order by c.surfacearea desc

Exercise 3
For the 20 oldest countries (by indepyear), show the difference between life expectancy in each country and the continental average.
               select c1.name, c1.indepyear as independence, c1.lifeexpectancy- sq1.avglife as difference 
               from country as c1, 
               (select continent, avg(lifeexpectancy) as avglife 
               from country group by continent) sq1
               where sq1.continent= c1.continent
               order by c1.indepyear
               limit 20

Exercise 4
Show the 20 biggest cities in the United States along with their rank in the state and percent of the city population in a state.
(Comment: note that this database does not contain all municipalities. Restrict your population count to this dataset.)
               SELECT [ALL | DISTINCT] column1[,column2] FROM table1[,table2] 
               [WHERE "conditions"] [GROUP BY "column-list"] 
               [HAVING "conditions] 
               [ORDER BY "column-list" [ASC | DESC]


               select ci.name, ci.population*100/sq1.statepop 
               as state_perc,  
               rank() over(partition by ci.district order by ci.population desc) as state_rank
               from city as ci, country as co,
               (select district, sum(population) as statepop from city as ci
               group by district) sq1
               where ci.countrycode = co.code AND ci.countrycode='USA' AND
               ci.district=sq1.district
               order by ci.population desc
               limit 20

Exercise 5 
For the 5 most populous countries, show the 3 most populous cites per country. Order cities by their population.               with bigcity as (select name, population, 
               rank() over(partition by countrycode order by population desc) 
               as rank from city)
               select co.name, ci.name, ci.population, 
               rank() over(partition by ci.countrycode order by ci.population desc) 
               as city_rank from city as ci, country as co, bigcity as bc,
               (select name, population as countpop from country
               order by countpop desc limit 5) bigco
               where ci.countrycode = co.code and ci.name=bc.name and co.name= bigco.name
               and bc.rank<=5 

               with co as (select name, code , rank() over(order by population desc)
               from country rank),
               ci as (select name, countrycode , rank() over(partition by countrycode order by population desc)
               from city rank)
               select co.name, ci.name,co.rank, ci.rank
               from co
               inner join ci
               ON co.code=ci.countrycode
               where ci.rank<=3 and co.rank <=5
               order by co.rank, ci.rank


Exercise 6 
You run a travel agency and want to create a database for your business.
Right all data is being stored in a text file, which looks like that:
Picturesque Polish Ponds
1-5 May 2017
Guides: Andrew Brown (EN, MN, PL), Teresa Kowalska (EN, PL, RU)
Participants:
* Hanna Edison <hanna.edison.137@gmail.com> (£750, paid)
* Sue Clark <sue@sueclark.uk> (£750, unpaid, booking due: 31 Dec 2016)
* Gordon Ryan <gr@halfbiolife.com> (£750, paid)
 
Marvellous Mongolian Mountains
14-30 June 2017
Guides: Rachel Diaz (ES, PR, RU, MN), Andrew Brown (EN, MN, PL)
Participants:
* …
Create PostgreSQL tables that would be capable of storing this data. Present this data in a normal form (i.e. without multiple entries in the same field like ‘EN, MN, PL’, and without data duplication).


               drop table humans;
               drop table marriages;

#creating a table containing names of people that are to be or have been married
               create table humans (
               id integer PRIMARY KEY,
               forename text NOT NULL,
               surname text NOT NULL,
               birthday date,
               sex varchar(1)
               constraint chk_sex CHECK(sex in ('m','f','M','F')));
 
#creating a table which will have information on conducted marriages
               create table marriages (
               id integer PRIMARY KEY,
               partner_1_id integer,
               partner_2_id integer,
               marriage_date date,
               divorce_date date,
               constraint chk_date CHECK (marriage_date<divorce_date),
               foreign key (partner_1_id) REFERENCES humans(id),
               foreign key (partner_2_id) REFERENCES humans(id));

                create table languages (
                lang_id integer primary key,
                language text not null)

                create table guides (
                guide_id integer PRIMARY KEY,
                first_name text NOT NULL,
                last_name text NOT NULL,
                employment_date date,
                lang1 integer,
                lang2 integer,
                lang3 integer,
                lang4 integer,
                lang5 integer,
                foreign key (lang1) REFERENCES languages(lang_id),
                foreign key (lang2) REFERENCES languages(lang_id),
                foreign key (lang3) REFERENCES languages(lang_id),
                foreign key (lang4) REFERENCES languages(lang_id),
                foreign key (lang5) REFERENCES languages(lang_id))

                create table tours (
                tour_id integer PRIMARY KEY,
                tour_name text NOT NULL,
                start_date date,
                end_date date,
                price integer not null,
                guide_id integer,
                foreign key (guide_id) REFERENCES guides(guide_id))


                create table customers (
                cust_id integer PRIMARY KEY,
                first_name text NOT NULL,
                last_name text NOT NULL,
                email_add text NOT NULL)

                create table cust_payments (
                tour_id integer primary key,
                cust_id integer,
                amount_paid integer,
                outstanding_amount integer,
                booking_date date,
                foreign key (tour_id) REFERENCES tours(tour_id),
                foreign key (cust_id) REFERENCES customers(cust_id))

                drop table languages;
                drop table guides cascade;
                drop table customers cascade;
                drop table cust_payments cascade; 
                drop table tours cascade;

                select * from languages;
                select * from tours;
                select * from guides;
                select * from customers;
                select * from cust_payments;
